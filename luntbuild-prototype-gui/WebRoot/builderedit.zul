<?xml version="1.0" encoding="utf-8" ?>
<?taglib uri="/WEB-INF/tld/web/core.dsp.tld" prefix="c" ?>

<zk	xmlns="http://www.zkoss.org/2005/zul"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd"
	xmlns:h="http://www.w3.org/1999/xhtml">

	<popup id="buildername-tip" width="500px">
		<vbox>
		${c:l('builder.edit.name-tip')}
	   </vbox>
	</popup>
	<popup id="buildercmd-tip" width="500px">
		<vbox>
			<html if="${arg.type eq &quot;ant&quot; || arg.type eq &quot;nant&quot; || arg.type eq &quot;rake&quot;}">
		      <attribute name="content"><![CDATA[
		Specify the command to run Ant (normally path to ant.bat or ant shell script) here.
		For example: /path/to/ant -DbuildVersion="${'${'}build.version}" -DartifactsDir="${'${'}build.artifactsDir}".
		String enclosed by ${'${'}...} will be interpreted as OGNL expression, and it be evaluated before execution.
		For valid OGNL expressions in this context, please refer to the User's Guide.
		NOTE. A single argument that includes spaces should be quoted in order not to be interpreted as multiple arguments.
			  ]]></attribute>
		    </html>
	   </vbox>
	</popup>
	<popup id="builderscript-tip" width="500px">
		<vbox>
			<html if="${arg.type eq &quot;ant&quot; || arg.type eq &quot;nant&quot; || arg.type eq &quot;rake&quot;}">
		      <attribute name="content"><![CDATA[
The path for the build script. If this path is not an absolute path,
it is assumed that it is relative to the schedule work directory. Refer to the User's Guide
for details about how to write a new build file or how to modify your existing build script.
			  ]]></attribute>
		    </html>
			<html if="${arg.type eq &quot;maven1&quot; || arg.type eq &quot;maven2&quot;}">
		      <attribute name="content"><![CDATA[
Specify the directory to run Maven in. If this path is not an absolute path,
it is assumed to be relative to the schedule work directory. Defaults to schedule work directory if this property is left empty.
			  ]]></attribute>
		    </html>
			<html if="${arg.type eq &quot;command&quot;}">
		      <attribute name="content"><![CDATA[
The directory path to run the build command in.
If this path is not an absolute path, it is assumed to be relative to the project work directory.
			  ]]></attribute>
		    </html>
	   </vbox>
	</popup>
	<popup id="buildertargets-tip" width="500px">
		<vbox>
			<html if="${arg.type eq &quot;ant&quot; || arg.type eq &quot;nant&quot; || arg.type eq &quot;rake&quot;}">
		      <attribute name="content"><![CDATA[
Specify the targets to build. Use space to separate different targets (target name containing spaces should be quoted in order
not to be interpreted as multiple targets). You can also use ${'${'}...} to pass variables to the target name.
For example you can use ${'${'}build.schedule.name} to achieve different targets for different schedules.
For valid OGNL expressions in this context, please refer to the User's Guide.
			  ]]></attribute>
		    </html>
			<html if="${arg.type eq &quot;maven1&quot; || arg.type eq &quot;maven2&quot;}">
		      <attribute name="content"><![CDATA[
Specify the goals to build. Use space to separate different goals (goal name containing spaces should be quoted in order
not to be interpreted as multiple goals). You can also use ${'${'}...} to pass OGNL variables as the goal name.
For example you can use ${'${'}build.schedule.name} to achieve different goals for different schedules.
For valid OGNL expressions in this context, please refer to User's Guide.
			  ]]></attribute>
		    </html>
			<html if="${arg.type eq &quot;command&quot;}">
		      <attribute name="content"><![CDATA[
This property determines whether the build will wait for the command execution to complete before continuing.
			  ]]></attribute>
		    </html>
	   </vbox>
	</popup>
	<popup id="builderproperties-tip" width="500px">
		<vbox>
			<html>
		      <attribute name="content"><![CDATA[
Define build properties here to pass into the ant build script. For example:
<br>buildVersion=${'${'}build.version}
<br>scheduleName=${'${'}build.schedule.name}
<br>You should set one variable per line. OGNL expression can be inserted to form the value provided they are enclosed by ${'${'}...}.
For valid OGNL expressions in this context, please refer to the User's Guide.
			  ]]></attribute>
		    </html>
	   </vbox>
	</popup>
	<popup id="builderenvvar-tip" width="500px">
		<vbox>
			<html>
		      <attribute name="content"><![CDATA[
Environment variables to set before running this builder. For example:
<br>buildVersion=${'${'}build.version}
<br>scheduleName=${'${'}build.schedule.name}
<br>You should set one variable per line. OGNL expression can be inserted to form the value provided they are enclosed by ${'${'}...}.
For valid OGNL expressions in this context, please refer to the User's Guide.
			  ]]></attribute>
		    </html>
	   </vbox>
	</popup>
	<popup id="buildercondition-tip" width="500px">
		<vbox>
			<html>
		      <attribute name="content"><![CDATA[
		      ${c:l('builder.edit.condition-tip')}
			  ]]></attribute>
		    </html>
	   </vbox>
	</popup>

	<tabbox id="buildertabs" style="border: 0px" width="100%" onCreate="loadBuilderTabData()" onSelect="loadBuilderTabData()">
		<tabs>
			<tab id="tab_ant" label="${c:l('builderedit.tab.ant')}" selected="true"/>
			<tab id="tab_maven1" label="${c:l('builderedit.tab.maven1')}"/>
			<tab id="tab_maven2" label="${c:l('builderedit.tab.maven2')}"/>
			<tab id="tab_command" label="${c:l('builderedit.tab.command')}"/>
			<tab id="tab_nant" label="${c:l('builderedit.tab.nant')}"/>
			<tab id="tab_rake" label="${c:l('builderedit.tab.rake')}"/>
		</tabs>
		<tabpanels>
			<tabpanel id="anttab"/>
			<tabpanel id="maven1tab"/>
			<tabpanel id="maven2tab"/>
			<tabpanel id="commandtab"/>
			<tabpanel id="nanttab"/>
			<tabpanel id="raketab"/>
		</tabpanels>
		<zscript><![CDATA[
		void loadBuilderTabData() {
		Tabpanel panel = buildertabs.getSelectedPanel();
		HashMap args=new HashMap();
		if (panel != null) {
			if (panel.getId().equals("anttab")) {
				if (panel.getChildren().isEmpty()) {
					args.put("type","ant");
				    Executions.createComponents("/builderpanel.zul", anttab, args);
				} else {
				// TODO update existing
				}
			} else if (panel.getId().equals("maven1tab")) {
				if (panel.getChildren().isEmpty()) {
					args.put("type","maven1");
				    Executions.createComponents("/builderpanel.zul", maven1tab, args);
				} else {
				// TODO update existing
				}
			} else if (panel.getId().equals("maven2tab")) {
				if (panel.getChildren().isEmpty()) {
					args.put("type","maven2");
				    Executions.createComponents("/builderpanel.zul", maven2tab, args);
				} else {
				// TODO update existing
				}
			} else if (panel.getId().equals("commandtab")) {
				if (panel.getChildren().isEmpty()) {
					args.put("type","command");
				    Executions.createComponents("/builderpanel.zul", commandtab, args);
				} else {
				// TODO update existing
				}
			} else if (panel.getId().equals("nanttab")) {
				if (panel.getChildren().isEmpty()) {
					args.put("type","nant");
				    Executions.createComponents("/builderpanel.zul", nanttab, args);
				} else {
				// TODO update existing
				}
			} else if (panel.getId().equals("raketab")) {
				if (panel.getChildren().isEmpty()) {
					args.put("type","rake");
				    Executions.createComponents("/builderpanel.zul", raketab, args);
				} else {
				// TODO update existing
				}
			}
		}
		}
		]]></zscript>
	</tabbox>

</zk>